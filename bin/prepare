#!/bin/bash

set -euo pipefail

if [ $# != 2 ]; then
    echo "Usage: prepare <OLD GIT TAG> <NEW GIT TAG>"
    exit 1
fi

OLD_VSN=$1
VERSION_TAG=v$2

run_build() {
    rebar get-deps
    rebar compile
    relx $RELX_OPTIONS $RELX_CMD
}

mkdir -p ~/.ssh
echo "Host *\n    StrictHostKeyChecking no" > ~/.ssh/config
echo "$SSH_KEY" > ~/.ssh/id_rsa
ssh-keyscan git.herokai.com >> ~/.ssh/known_hosts

sh /app/bin/otp.sh
. /app/bin/otp.sh

git clone $GITREPO $REL_NAME
cd $REL_NAME

git fetch origin --tags --prune

erl="$(which erl)"
code="io:format(\"~s\", [erlang:system_info(version)])."
ERTS_VSN="$("$erl" -noshell -eval "$code" -s init stop)"

mkdir -p _rel/$REL_NAME/
gof3r get --bucket=$BUCKET --path=/tmp/$REL_NAME-$OLD_VSN.tar.gz --key=$REL_NAME/$OLD_VSN/$ERTS_VSN/$REL_NAME-$OLD_VSN.tar.gz
if [ $? -eq 0 ]; then
    tar -zxvf /tmp/$REL_NAME-$OLD_VSN.tar.gz -C _rel/$REL_NAME/
    RELX_CMD="release relup tar"
else
    RELX_CMD="release tar"
fi

RELX_OPTIONS="-i true --dev-mode false"

git checkout -q $VERSION_TAG

run_build
upload _rel/$REL_NAME/$REL_NAME-$VERSION.tar.gz $REL_NAME/$VERSION/$ERTS_VSN/$REL_NAME-$VERSION.tar.gz

RELX_OPTIONS="-i false --dev-mode false"
run_build
upload _rel/$REL_NAME/$REL_NAME-$VERSION.tar.gz $REL_NAME/$VERSION/$ERTS_VSN/$REL_NAME-$VERSION-no-erts.tar.gz

exit 0
